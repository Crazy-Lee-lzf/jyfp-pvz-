=====================记忆翻图游戏=========================
零）新建工程名Z03，对话框标题“记忆翻图游戏――XXX制作”，静态DLL库，工程配置Release


一）界面设置与资源准备
1）说明框修改――参照Z02
	关于 记忆翻图游戏(&A)...	//String Table字串表
	关于 记忆翻图游戏		//ABOUT框，标题栏
	记忆翻图游戏 3.0版		//ABOUT框，静态文本控件
	版权所有 XXX (C) 2024	//ABOUT框，静态文本控件（XXX为个人姓名）
2）引入资源图片若干：（范例引入的为gif图片80*75，宽80高75）――参照401、403等诸例
	★全黑图片image0,对应IDR_GIF0（更名）
	★图片image1-image18，对应IDR_GIF1-IDR_GIF18（批量引入，注意方法！）
	★★保存，编译，通过Resource.h确认编号连续
3）因gif图片为非系统系统默认类型，需引入新类定义
	★★★完成作业时，根据自己所选素材的格式，参考前例处理。若素材为png，jpg，bmp或icon文件该如何处理？
	①添加新类CPictureEx，有CStatic类派生
	②将对应的PictureEx.cpp和PictureEx.h内容替换成素材提供的内容
	③★在主头文件中引入新头文件
4）主对话框界面（字体布局，自行完成）
	①对话框属性：字体“小三”，样式勾选“最小化框”“最大化框”
	②拖拉四个按钮：
		ID名			标题		属性
		IDC_BUTTON1		初级难度
		IDC_BUTTON2		中级难度
		IDC_BUTTON3		高级难度
		IDC_BUTTON4		结束游戏		初始禁用
	③拖拉6*6=36个静态文本控件（★若为bmp，icon格式则改为图像控件；若为jpg、gif、png则同为静态文本控件，数量取决于你的最大难度数目N*N）：
		属性：初始不可见
		★编号IDC_STATIC0-IDC_STATIC35
		★★保存、编译，通过Resource.h确认编号连续


二）预处理与初始化程序
1）初始化对话框函数补充
	对话框初始位置(200,50)，大小(100+80*6+100,100+75*6+100)，置顶，显示
		注意参数来由：即图片80*75，最多6*6格，四边各预留100像素空隙
	四个按钮大小皆为(100,30)，位置(50,30)，(200,30)，(350,30)，(550,30)，无首参无Z轴
		注意参数来由：难度数量变化后，自行调整
	★★★完成作业时，布局参数由需要自行决定，亦可竖排

2）通过代码视图（主头文件），定义辅助变量、函数（★★★注意，此处必须同时补上函数定义，先建空壳函数！记得补类名！）
	int i;		//临时变量，记住每次单击位置
	int N;		//有效大小N*N
	int t;		//时间变量，决定翻转停留时间即游戏难度
	int lastnumber;	//记录上一次翻开的图片编号，无为-1，其余为0-35
	bool odd;		//奇偶识别标志
	bool right;	//判断是否全部正确标记，真为全部正确游戏结束；假为游戏未开始或进行中
	int Psn[36];	//图片数组，即标准答案图片布局，存储内容为图片对应序号1-18，大小等同于图片控件数
	bool flag[36];	//图片标记数组，true该格图片已确认，false为该格图片未确认，大小等同于图片控件数
	void Start();	//开始游戏函数，做一些初始化准备工作
	void Recovery();	//恢复显示函数，根据标记状态，对所有网格图片全部恢复显示一次
	void RandPutGif();	//随机布局图片函数

3)通过类向导，增加系统消息响应函数（2个）和按钮触发函数（4个）	
	左键响应		OnLButtonDown
	定时器响应	OnTimer
	4个按钮触发函数，名略	


===========此处可备份===========
4）给36个图像控件对应上36个控制型变量，即对应数组tu[36]
	★★★此处会破坏程序向导，最好所有变量、函数先声明好，正确无遗漏后再使用。完成作业时，注意对应修改
	★★★若改进版或作业后续需补一些对应操作，可学会临时解除此段内容！！再演示一遍！！！
	声明方法类似403、404、405、502、601等诸例。★★先增加控制型变量数组，再将其对应上控件
	★★★自行完成时，增加了难度选择后，可能引起资源编号、循环范围的改变	



三）三个难度按钮对应函数
1）依难度给N赋值（先暂时统一为6）
2）依难度给t赋值（先统一为5000）
3）调用开始游戏函数


四）“结束游戏”按钮对应函数（和Z02不同，实际功能为准备重新开始）
1）自行补充语句：将所有图片控件不可见（即无论该难度用到多少，所有图片控件皆隐藏，即范围为常量，参考502改进-3）
2）自行补充语句：除“结束游戏”外的三个难度按钮全部使能，“结束游戏”禁用
	

五）开始游戏函数Start()：完成一些初始化工作
1）将除“结束游戏”外的三个难度按钮全部禁用，将“结束游戏”按钮使能（即和四-2正好相反）
2）产生随机种子
3）给lastnumber、odd、right分别赋予初始为-1、true、false
4）★利用循环，给所有图片所在静态文本控件，设置位置、大小、可见；同时给Psn数组、flag数组赋初值，全部为-1和false
	★★★完成作业时，注意对应修改！
	for(i=0;i<6*6;i++)	
	{
		Psn[i]=-1;	//给图片编号全清为-1
		flag[i]=false;	//给图片显示标识全初始设为false
		GetDlgItem(？？+i)->SetWindowPos(NULL,100+81*(i%6),100+76*(i/6),80,75,SWP_SHOWWINDOW);	
		//参考403，这里使用了一维下标转二维下标,多一个像素，是为了美观好看
	}
5）调用随机布局图片函数（即产生标注答案图）
6）调用恢复显示函数（即刷新显示）


六）随机布局图片函数RandPutGif()
1）将1-18随机放在36大小的数组中，每个两次
	★★参考404随机布图例！完成作业时，注意对应修改！
	int i,j;	//局部临时变量，即放入的数组下标
	for(j=1;j<=(6*6)/2;j++)	//将图片1-18分配给36个控件，每个数字两次，注意区别！
	{
		i=rand()%(6*6);
		while(Psn[i]!=-1)
			i=rand()%(6*6);
		Psn[i]=j;

		i=rand()%(6*6);
		while(Psn[i]!=-1)
			i=rand()%(6*6);
		Psn[i]=j;
	}


七）恢复显示函数Recovery()
1）★利用循环，判断是否各图片已经全部定位，确定的图片显示对应图，否则显示全暗
	★★完成作业时，注意对应修改！若素材非gif语句，参考401。不同类型图片使用不同的动态显示语句
	right=true;			//每次恢复前，先假定全部标记正确
	int j;				//局部循环标记
	for(j=0;j<6*6;j++)	//因此时i记住了当前翻盘位置，不能用i循环
	{	
		if(flag[j]==false)
		{
			right=false;	//只要任一图片未标记定格，即假
			if(tu[j].Load(MAKEINTRESOURCE(129),_T("gif")))	//全暗，129为全黑图片资源编号
				tu[j].Draw();
		}
		else
		{
			if(tu[j].Load(MAKEINTRESOURCE(Psn[j]+129),_T("gif")))	//显示对应图片
				tu[j].Draw();
		}
	}
2）★自行补充语句：如果right为真，则弹出对话框提示，自动调用“结束按钮”函数
	参考：	MessageBox("恭喜你，全部完成！","散花");	//可自选消息框类型，参考301


八）左键响应函数
1）★★★得到点击处控件行列坐标，参考例502，9-3步
	CPoint pt;
	GetCursorPos(&pt);	//得到鼠标左键坐标
	CRect rectBtn;
	GetDlgItem(IDC_STATIC0)->GetWindowRect(&rectBtn);	//得到★第一个图片控件坐标
	int x=(pt.y-rectBtn.top)/(75+1);	//得到第x行，参数取决于你的图片大小高
	int y=(pt.x-rectBtn.left)/(80+1);	//得到第y列，参数取决于你的图片大小宽
	i=x*6+y;				//二维下标转一维下标
2）完善性考虑
	if(lastnumber==i)	//连续按同一控件：无效
		return;		//此次无效，直接结束
3）结束1号定时器：★自行补充语句
4）根据奇数次还是偶数次触发，进行判断并执行相应语句
	if(odd==true)		//奇数次按：刷新显示->显示当前图片->启动计时->记录当前控件编号->odd翻转
	{
		Recovery();	
		if(tu[i].Load(MAKEINTRESOURCE(129+Psn[i]),_T("gif")))	//本次图显示
			tu[i].Draw();
		SetTimer(1,t,NULL);
		lastnumber=i;		//做记录
		odd=false;
	}
	else				//偶数次按：显示当前图片->匹配检测：成功则双双确定，即时恢复；失败则启动计时->记录当前控件编号->odd翻转
	{
		if(tu[i].Load(MAKEINTRESOURCE(129+Psn[i]),_T("gif")))	//本次图显示
			tu[i].Draw();
		if(Psn[lastnumber]==Psn[i])
		{
			flag[lastnumber]=true;
			flag[i]=true;
			Recovery();
		}
		else
		{
			SetTimer(1,t,NULL);
		}
		lastnumber=i;		//做记录
		odd=true;
	}


九）定时器响应函数
定时器时间到，恢复显示，记录作废
	switch(nIDEvent)	//参考例501
	{
	case 1:	
		Recovery();	//刷新显示，未确认的图片变黑图
		lastnumber=-1;	//定时器到点，则上次记录位置作废
		odd=true;	//定时器到点，都为奇数次重新开始
		KillTimer(1);
		break;
	default: break;
	}


===========以上完成V1.0版本===========


===========结束语===========
一）该程序的改进方向
1）★该类游戏的难度设置（V2.0版本）：
	提示1：初始定义图片、控件数仍为预设最大的N*N的结果，不动；
	提示2：第三步在难度函数里设置不同的N、t，体现在图片规模和时间间隔两处
		★跟着老师完成2.0版本：试把难度时间间隔改为5000|2000|1000，规模大小改为2|4|6
	提示3：循环控制、识别图片时注意使用N、N*N分界；随机图片1~N*N/2等等。
		★★★注意：不要漏改，但也不要多改！有些地方常量改为变量，有些则不改
	
2）★细节完善：考虑越界情况（V2.1版本）：
	if(pt.y-rectBtn.top<0 || i>M-1|| pt.x-rectBtn.left<0 || j>N-1)	//更好
		return;
	见502改进-1，补在八-1）后面，注意修改！

3）★细节完善：未开始游戏则禁用左键触发（2.2版本）：
	//无此句，再次开始游戏会有小bug，历届扣分项
	//加在左键函数的起始，参考601改进
	if(right==true)
		return;

4）★★记录游戏时间（3.0版本）
	参考Z02猜数字记录时间3.0版，101改进、402改进、Z02等多题
	//增加辅助变量start、end、temp，并在适当位置得到值
	//"你花了 %5d 秒的时间",end-start 	"游戏时间"


5）奇数（3.1版本）（略）
	布置作业时讲

5）★★★记录最佳历史成绩（教师演示为主，4.0版）
	★参考Z02猜数字记录时间3.1版
	★（4.0版本）整体大小修改一下，放入新控件2个！
		“历史排行榜”，居中
		列表框控件：增加新变量（因前面已破坏向导，不宜新增控件变量，需预作准备！）
		先试着改为前N名（N不为7，比如9；注意所有修改之处），参考Z02改进版完成！
	★★★能根据不同难度对应不同的记录（4.1版本）：
		①头文件：按难度声明若干组（猜数字3.1版本仅为1组）
		②独立的若干个Refresh()函数定义
		③拆开初始化默认记录数据：初始化值部分在init函数里，不同难度全部在这里初始化，仅一次
		④针对难度,拆开显读取示已有记录：加入显示部分在难度函数里，★记住先复位清空上次记录
		⑤游戏胜利时，根据难度区别，拆开添加记录
		
6）其他改进








二）大作业要求――仿造范例制作一个"记忆翻图游戏"的游戏程序
1）工程名为“2+本人学号”（合计10位数字，如2220151123)，标题栏为学生姓名！（必须要求：★★★）
2）要求：学生各自寻找不同的图片资源，可以为各种格式，但应先处理好大小相同，且不要太大！
	除了N*N/2张图片外，另备一张同尺寸大小全黑图片
	gif与jpg、png类似，采用bmp，icon需另行处理（png、jpg格式为★加分项，可参照401不同图片的使用）
	（401：四种格式素材；402、503、601为BMP格式、403、404、502为ICON格式、405PNG格式、603为JPG格式）
3）要求：最大规模至少为8*8格的游戏（必须要求：★★★，但上限总数不要超过250）
	★注意对应引起的控件变量个数、位置参数、大小参数、循环边界等等的变化
	★素材过多时，注意分批导入
	在一些布局、禁用上可自行仿造或合理修改
	重新排版布局（★加分项)
4）要求：可选难度区别自定义，至少4级难度（4~6级）
	★按钮的布局自己掌握，难度的间隔时间、布局大小都可以自己决定
	参考502改进，长宽不一定要一样，即变为M*N（★加分项）
	如果是奇数规模应如何？（采用中心为黑的奇数布局，★★加分项）
		实际只需更改初始化RandPutGif()，预设中心点为指定图片（值），且永久定住
5）要求：至少完成至版本3.0（即能显示游戏完成时间，必须要求：★★★）的功能
	创建记录（★加分项）、改变大小的混合创建记录（★★加分项）、完善的分类创建记录（★★★加分项）
6）其他额外功能★~★★★加分项
	菜单选择：参考例701
	可加自定义难度（注意屏蔽非法项）：参考例602，502改进
	可变化界面、欢迎提示界面、帮助界面：参考502、301、701等
	背景音乐、背景图片：参考例605
	记录写入后台（从后台读出）：参考604、Z04
	其他自加功能：进度条（参考701）、作弊（参考601改进）、显示时间（参考501）、数字图片（参考602）、倒计时等等
7）扣分项：各种小bug未解决
8）完成时间：★★★第15周上课（6.5日）前给老师，越早完成越好（★加分项，可追加更新版本!）
	三样材料：工程压缩包（多余文件最好删除掉）、可执行exe文件、说明文档（做了哪些改进要求）

	说明文档内容（含评分标准）：
	1）使用的图片格式
	2）分？级难度，分别为……
	3）每级难度对应的时间间隔、布局大小
	4）完成XX版本的功能
	5）其他补充说明：自己做的特色之处，如完成哪些加分项，特别是自定义的加分项



